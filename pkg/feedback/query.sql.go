// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package feedback

import (
	"context"
)

const createFeedback = `-- name: CreateFeedback :one
INSERT INTO feedback (message)
VALUES ($1)
RETURNING id, message, created_at
`

func (q *Queries) CreateFeedback(ctx context.Context, message string) (Feedback, error) {
	row := q.db.QueryRow(ctx, createFeedback, message)
	var i Feedback
	err := row.Scan(&i.ID, &i.Message, &i.CreatedAt)
	return i, err
}

const deleteFeedback = `-- name: DeleteFeedback :exec
DELETE FROM feedback
WHERE id = $1
`

func (q *Queries) DeleteFeedback(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFeedback, id)
	return err
}

const getFeedback = `-- name: GetFeedback :one
SELECT id, message, created_at
FROM feedback
WHERE id = $1
`

func (q *Queries) GetFeedback(ctx context.Context, id int32) (Feedback, error) {
	row := q.db.QueryRow(ctx, getFeedback, id)
	var i Feedback
	err := row.Scan(&i.ID, &i.Message, &i.CreatedAt)
	return i, err
}

const listFeedback = `-- name: ListFeedback :many
SELECT id, message, created_at
FROM feedback
ORDER BY id DESC
`

func (q *Queries) ListFeedback(ctx context.Context) ([]Feedback, error) {
	rows, err := q.db.Query(ctx, listFeedback)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feedback
	for rows.Next() {
		var i Feedback
		if err := rows.Scan(&i.ID, &i.Message, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedback = `-- name: UpdateFeedback :one
UPDATE feedback
SET message = $2
WHERE id = $1
RETURNING id, message, created_at
`

type UpdateFeedbackParams struct {
	ID      int32
	Message string
}

func (q *Queries) UpdateFeedback(ctx context.Context, arg UpdateFeedbackParams) (Feedback, error) {
	row := q.db.QueryRow(ctx, updateFeedback, arg.ID, arg.Message)
	var i Feedback
	err := row.Scan(&i.ID, &i.Message, &i.CreatedAt)
	return i, err
}
